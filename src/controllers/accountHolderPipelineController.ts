/**
 * v3.cashLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ApiErrorsError } from '../errors/apiErrorsError';
import {
  AccountHolderPipelineCreateRequest,
  accountHolderPipelineCreateRequestSchema,
} from '../models/accountHolderPipelineCreateRequest';
import {
  AccountHolderPipelineResponse,
  accountHolderPipelineResponseSchema,
} from '../models/accountHolderPipelineResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class AccountHolderPipelineController extends BaseController {
  /**
   * Create an AccountHolderPipeline to allow transactions
   *
   * @param tenantId     Valid Tenant Id for request
   * @param xUserId      Valid User Id who is executing the request ,
   *                                                                  this is used for audit invalid user id will fail
   * @param body         The Account Holder Pipeline attributes
   * @return Response from the API call
   */
  async createAccountHolderPipeline(
    tenantId: string,
    xUserId: string,
    body: AccountHolderPipelineCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountHolderPipelineResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      tenantId: [tenantId, string()],
      xUserId: [xUserId, string()],
      body: [body, accountHolderPipelineCreateRequestSchema],
    });
    req.header('x-user-id', mapped.xUserId);
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/tenants/${mapped.tenantId}/account-holder-pipelines`;
    req.throwOn(422, ApiErrorsError, 'Bad Request Parameter');
    return req.callAsJson(accountHolderPipelineResponseSchema, requestOptions);
  }
}
