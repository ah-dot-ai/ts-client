/**
 * v3.cashLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AccountHolderListResponse,
  accountHolderListResponseSchema,
} from '../models/accountHolderListResponse';
import {
  AccountHolderResponse,
  accountHolderResponseSchema,
} from '../models/accountHolderResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class AccountHolderController extends BaseController {
  /**
   * List all Account Holder
   *
   * @param tenantId  Valid Tenant Id for request
   * @param xUserId   Valid User Id who is executing the request , this is used for audit invalid user id
   *                            will fail
   * @return Response from the API call
   */
  async getAccountHolderList(
    tenantId: string,
    xUserId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountHolderListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      tenantId: [tenantId, string()],
      xUserId: [xUserId, string()],
    });
    req.header('x-user-id', mapped.xUserId);
    req.appendTemplatePath`/api/tenants/${mapped.tenantId}/account-holders`;
    return req.callAsJson(accountHolderListResponseSchema, requestOptions);
  }

  /**
   * Details of Single Account Holder
   *
   * @param tenantId  Valid Tenant Id for request
   * @param id        Valid Account Holder Id
   * @param xUserId   Valid User Id who is executing the request , this is used for audit invalid user id
   *                            will fail
   * @return Response from the API call
   */
  async getAccountHolder(
    tenantId: string,
    id: string,
    xUserId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountHolderResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      tenantId: [tenantId, string()],
      id: [id, string()],
      xUserId: [xUserId, string()],
    });
    req.header('x-user-id', mapped.xUserId);
    req.appendTemplatePath`/api/tenants/${mapped.tenantId}/account-holders/${mapped.id}`;
    return req.callAsJson(accountHolderResponseSchema, requestOptions);
  }
}
